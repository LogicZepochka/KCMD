libsNames = ["kernel_router.so",
    "init.so",
    "kernel_module.so",
    "net.so",
    "aptclient.so",
    "crypto.so",
    "blockchain.so",
    "metaxploit.so",
    "libhttp.so",
    "libsmtp.so",
    "libsql.so",
    "libftp.so",
    "libssh.so",
    "libchat.so",
    "librshell.so",
    "libcam.so",
    "librepository.so"]
ExploitDB = {}
ExploitDB.libs = {}

ExploitDB.ready = true

ExploitDB.prepareDBFolders = function()
    dbFile = get_shell.host_computer.File(Program.path+Program.settings["databasePath"])
    for libName in libsNames
        libFolder = get_shell.host_computer.File(Program.path+Program.settings["databasePath"]+"/"+libName)
        if libFolder == null then get_shell.host_computer.create_folder(Program.path+Program.settings["databasePath"],libName)
    end for
end function

ExploitDB.Init = function()
	for name in libsNames
        self.libs[name] = {}
    end for
	
    self.prepareDBFolders
    self.ready = true
    self.LoadDB
end function


ExploitDB.LoadDB = function()
    if not self.ready then return 0
    for libName in libsNames
        libFolder = get_shell.host_computer.File(Program.path+Program.settings["databasePath"]+"/"+libName)
        for file in libFolder.get_files
            ver = file.name
            content = file.get_content
            if content == null then return UI.printError("ERROR WHEN LOADING DB","EDB")
            for line in content.split(char(10))
                mem = line.split(":")[0]
                words = line.split(":")[1]
                for word in words.split("!")
                    self.AddNew(libName,ver,mem,word)
                end for
            end for
        end for
    end for
    self.SaveDB()
    UI.print("Успешная загрузка данных из базы данных.")
end function

ExploitDB.SaveDB = function()
    if not self.ready then return 0
    for libName in self.libs.indexes
        libFolder = get_shell.host_computer.File(Program.path+Program.settings["databasePath"]+"/"+libName)
        for ver in self.libs[libName].indexes
            versFile = get_shell.host_computer.File(Program.path+Program.settings["databasePath"]+"/"+libName+"/"+ver)
            if versFile == null then get_shell.host_computer.touch(Program.path+Program.settings["databasePath"]+"/"+libName,ver)
            versFile = get_shell.host_computer.File(Program.path+Program.settings["databasePath"]+"/"+libName+"/"+ver)
            str = ""
            for mem in self.libs[libName][ver].indexes
                str = str + mem + ":"
                for word in self.libs[libName][ver][mem]
                    str = str + word + "!"
                end for
                str = str[:-1] + char(10)
            end for
            str = str[:-1]
            versFile.set_content(str)
        end for
    end for
end function

ExploitDB.Request = function(lib,ver)
    if not self.ready then return 0
    if not hasIndex(self.libs[lib],ver) then
        UI.printWarning("Нет информации о библиотеке <b>"+lib+"</b> версии <b>"+ver+"</b>")
        return null
    end if
    UI.printWarning("Получена информация из базы данных | <b>"+lib+"</b> версии <b>"+ver+"</b>")
    return self.libs[lib][ver]
end function

ExploitDB.AddNew = function(lib,ver,mem,word)
    if not self.ready then return 0
    if not hasIndex(self.libs[lib],ver) then
        self.libs[lib][ver] = {}
    end if
    if not hasIndex(self.libs[lib][ver],mem) then
        self.libs[lib][ver][mem] = []
    end if
    self.libs[lib][ver][mem].push(word)
end function